xyplot(Life.Exp~Income|region, data=state, layout=c(2,2))
head(mpg )
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data=mpg)
head(airquality)
range(airquality$Ozone, na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col.axis="blue", col.lab="red")
title(main="Ozone and Wind in New York City")
with(airquality,plot(Wind,Ozone))
title(main="Ozone and Wind in New York City")
length(par())
names(par())
?par
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, set="n")
plot(airquality$Wind, set="n",airquality$Ozone)
plot(airquality$Wind, type="n",airquality$Ozone)
title(main="Wind and Ozone in NYC")
may<-subset(airquality, airquality$Month==5)
may<-subset(airquality, Month==5)
plot(may$Wind, may$Ozone, col="blue")
plot(may$Wind, may$Ozone, col="blue", pch=17)
points(may$Wind, may$Ozone, col="blue", pch=17)
notmay<subset(airquality, Month!=5)
notmay<-subset(airquality, Month!=5)
points(notmay$Wind, notmay$Ozone, col="red", pch=17)
points(notmay$Wind, notmay$Ozone, col="red", pch=8)
legend("topright", pch=c(17,8), col=c("blue","red"), legend=c("May","Other Months"))
abline(median(airquality$Wind), lty=2)
abline(median(airquality$Wind), lty=2)
abline(v=median(airquality$Wind), lty=2)
abline(v=median(airquality$Wind), lty=2, lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone)
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow =c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp , airquality$Ozone, main = "Ozone and Solar Temperature")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer =TRUE)
bye()
swirl()
energydata <- read.table("./exdata_data_household_power_consumption/household_power_consumption.txt", header = TRUE)
energydata
febdata <- energydata[grep("02/2007", energydata$Date)]
febdata
library(lubridate)
energydata <- read.table("./exdata_data_household_power_consumption/household_power_consumption.txt", header=TRUE, sep =";", na.strings="?", stringsAsFactors=FALSE, dec=".")
febdata<-subset(energydata, Date >= as.Date("31/01/2007") & Date >= as.Date("03/02/2007"))
febdata$Global_active_power<-as.numeric(febdata$Global_active_power)
febdata$Time<-strptime(febdata$Time, format="%H:%M:%S")
febdata[1:1440,"Time"] <- format(febdata[1:1440,"Time"],"2007-02-01 %H:%M:%S")
febdata[1441:2880,"Time"] <- format(febdata[1441:2880,"Time"],"2007-02-02 %H:%M:%S")
#Better way to avoid above 3 steps would be to
#Making a POSIXct date capable of being filtered and graphed by time of day
#febdata[, dateTime := as.POSIXct(paste(Date, Time), format = "%d/%m/%Y %H:%M:%S")]
png("plot2.png", width=480, height=480)
plot(febdata$Time, febdata$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
library(lubridate)
energydata <- read.table("./exdata_data_household_power_consumption/household_power_consumption.txt", header=TRUE, sep =";", na.strings="?", stringsAsFactors=FALSE, dec=".")
febdata<-subset(energydata, Date == "1/2/2007" | Date == "1/2/2007")
febdata$Global_active_power<-as.numeric(febdata$Global_active_power)
png("plot1.png", width=480, height=480)
hist(febdata$Global_active_power, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
dev.off()
library(lubridate)
energydata <- read.table("./exdata_data_household_power_consumption/household_power_consumption.txt", header=TRUE, sep =";", na.strings="?")
febdata<-subset(energydata, Date == "1/2/2007" | Date == "1/2/2007")
febdata$Global_active_power<-as.numeric(febdata$Global_active_power)
png("plot1.png", width=480, height=480)
hist(febdata$Global_active_power, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
dev.off()
library(lubridate)
energydata <- read.table("./exdata_data_household_power_consumption/household_power_consumption.txt", header=TRUE, sep =";")
febdata<-subset(energydata, Date == "1/2/2007" | Date == "1/2/2007")
febdata$Global_active_power<-as.numeric(febdata$Global_active_power)
png("plot1.png", width=480, height=480)
hist(febdata$Global_active_power, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
dev.off()
library(lubridate)
energydata <- read.table("./exdata_data_household_power_consumption/household_power_consumption.txt", header=TRUE, sep =";", na.strings="?", stringsAsFactors=FALSE, dec=".")
febdata<-subset(energydata, Date == "1/2/2007" | Date == "2/2/2007")
febdata$Global_active_power<-as.numeric(febdata$Global_active_power)
febdata$Time<-strptime(febdata$Time, format="%H:%M:%S")
febdata[1:1440,"Time"] <- format(febdata[1:1440,"Time"],"2007-02-01 %H:%M:%S")
febdata[1441:2880,"Time"] <- format(febdata[1441:2880,"Time"],"2007-02-02 %H:%M:%S")
#Better way to avoid above 3 steps would be to
#Making a POSIXct date capable of being filtered and graphed by time of day
#febdata[, dateTime := as.POSIXct(paste(Date, Time), format = "%d/%m/%Y %H:%M:%S")]
png("plot2.png", width=480, height=480)
plot(febdata$Time, febdata$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
library(lubridate)
energydata <- read.table("./exdata_data_household_power_consumption/household_power_consumption.txt", header=TRUE, sep =";", na.strings="?", stringsAsFactors=FALSE, dec=".")
febdata<-subset(energydata, Date == "1/2/2007" | Date == "2/2/2007")
febdata$Global_active_power<-as.numeric(febdata$Global_active_power)
#febdata$Time<-strptime(febdata$Time, format="%H:%M:%S")
#febdata[1:1440,"Time"] <- format(febdata[1:1440,"Time"],"2007-02-01 %H:%M:%S")
#febdata[1441:2880,"Time"] <- format(febdata[1441:2880,"Time"],"2007-02-02 %H:%M:%S")
#Better way to avoid above 3 steps would be to
#Making a POSIXct date capable of being filtered and graphed by time of day
#febdata[, dateTime := as.POSIXct(paste(Date, Time), format = "%d/%m/%Y %H:%M:%S")]
timeperiod<-strptime(paste(febdata$Date, febdata$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
png("plot2.png", width=480, height=480)
plot(timeperiod, febdata$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
library(lubridate)
energydata <- read.table("./exdata_data_household_power_consumption/household_power_consumption.txt", header=TRUE, sep =";", na.strings="?", stringsAsFactors=FALSE, dec=".")
febdata<-subset(energydata, Date == "1/2/2007" | Date == "2/2/2007")
febdata$Global_active_power<-as.numeric(febdata$Global_active_power)
febdata$Sub_metering_1<-as.numeric(febdata$Sub_metering_1)
febdata$Sub_metering_2<-as.numeric(febdata$Sub_metering_2)
febdata$Sub_metering_3<-as.numeric(febdata$Sub_metering_3)
library(lubridate)
energydata <- read.table("./exdata_data_household_power_consumption/household_power_consumption.txt", header=TRUE, sep =";", na.strings="?", stringsAsFactors=FALSE, dec=".")
febdata<-subset(energydata, Date == "1/2/2007" | Date == "2/2/2007")
febdata$Global_active_power<-as.numeric(febdata$Global_active_power)
febdata$Sub_metering_1<-as.numeric(febdata$Sub_metering_1)
febdata$Sub_metering_2<-as.numeric(febdata$Sub_metering_2)
febdata$Sub_metering_3<-as.numeric(febdata$Sub_metering_3)
timeperiod<-strptime(paste(febdata$Date, febdata$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
png("plot3.png", width=480, height=480)
plot(timeperiod, febdata$Sub_metering_1, type="l", ylab="Energy Submetering", xlab="")
lines(timeperiod, febdata$Sub_metering_2, type="l", col="red")
lines(timeperiod, febdata$Sub_metering_3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, lwd=2.5, col=c("black", "red", "blue"))
dev.off()
library(lubridate)
energydata <- read.table("./exdata_data_household_power_consumption/household_power_consumption.txt", header=TRUE, sep =";", na.strings="?", stringsAsFactors=FALSE, dec=".")
febdata<-subset(energydata, Date == "1/2/2007" | Date == "2/2/2007")
febdata$Global_active_power<-as.numeric(febdata$Global_active_power)
febdata$Sub_metering_1<-as.numeric(febdata$Sub_metering_1)
febdata$Sub_metering_2<-as.numeric(febdata$Sub_metering_2)
febdata$Sub_metering_3<-as.numeric(febdata$Sub_metering_3)
febdata$Global_reactive_power<-as.numeric(febdata$Global_reactive_power)
febdata$Voltage<-as.numeric(febdata$Voltage)
timeperiod<-strptime(paste(febdata$Date, febdata$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
png("plot3.png", width=480, height=480)
plot(timeperiod, febdata$Global_active_power, type="l", xlab="", ylab="Global Active Power", cex=0.2)
plot(timeperiod, febdata$Voltage, type="l", xlab="datetime", ylab="Voltage")
plot(timeperiod, febdata$Sub_metering_1, type="l", ylab="Energy Submetering", xlab="")
lines(timeperiod, febdata$Sub_metering_2, type="l", col="red")
lines(timeperiod, febdata$Sub_metering_3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=, lwd=2.5, col=c("black", "red", "blue"), bty="o")
plot(timeperiod, febdata$Global_reactive_power, type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
library(lubridate)
energydata <- read.table("./exdata_data_household_power_consumption/household_power_consumption.txt", header=TRUE, sep =";", na.strings="?", stringsAsFactors=FALSE, dec=".")
febdata<-subset(energydata, Date == "1/2/2007" | Date == "2/2/2007")
febdata$Global_active_power<-as.numeric(febdata$Global_active_power)
febdata$Sub_metering_1<-as.numeric(febdata$Sub_metering_1)
febdata$Sub_metering_2<-as.numeric(febdata$Sub_metering_2)
febdata$Sub_metering_3<-as.numeric(febdata$Sub_metering_3)
timeperiod<-strptime(paste(febdata$Date, febdata$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
png("plot3.png", width=480, height=480)
plot(timeperiod, febdata$Sub_metering_1, type="l", ylab="Energy Submetering", xlab="")
lines(timeperiod, febdata$Sub_metering_2, type="l", col="red")
lines(timeperiod, febdata$Sub_metering_3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, lwd=2.5, col=c("black", "red", "blue"))
dev.off()
library(lubridate)
energydata <- read.table("./exdata_data_household_power_consumption/household_power_consumption.txt", header=TRUE, sep =";", na.strings="?", stringsAsFactors=FALSE, dec=".")
febdata<-subset(energydata, Date == "1/2/2007" | Date == "2/2/2007")
febdata$Global_active_power<-as.numeric(febdata$Global_active_power)
febdata$Sub_metering_1<-as.numeric(febdata$Sub_metering_1)
febdata$Sub_metering_2<-as.numeric(febdata$Sub_metering_2)
febdata$Sub_metering_3<-as.numeric(febdata$Sub_metering_3)
febdata$Global_reactive_power<-as.numeric(febdata$Global_reactive_power)
febdata$Voltage<-as.numeric(febdata$Voltage)
timeperiod<-strptime(paste(febdata$Date, febdata$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
png("plot4.png", width=480, height=480)
plot(timeperiod, febdata$Global_active_power, type="l", xlab="", ylab="Global Active Power", cex=0.2)
plot(timeperiod, febdata$Voltage, type="l", xlab="datetime", ylab="Voltage")
plot(timeperiod, febdata$Sub_metering_1, type="l", ylab="Energy Submetering", xlab="")
lines(timeperiod, febdata$Sub_metering_2, type="l", col="red")
lines(timeperiod, febdata$Sub_metering_3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=, lwd=2.5, col=c("black", "red", "blue"), bty="o")
plot(timeperiod, febdata$Global_reactive_power, type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
library(lubridate)
energydata <- read.table("./exdata_data_household_power_consumption/household_power_consumption.txt", header=TRUE, sep =";", na.strings="?", stringsAsFactors=FALSE, dec=".")
febdata<-subset(energydata, Date == "1/2/2007" | Date == "2/2/2007")
febdata$Global_active_power<-as.numeric(febdata$Global_active_power)
febdata$Sub_metering_1<-as.numeric(febdata$Sub_metering_1)
febdata$Sub_metering_2<-as.numeric(febdata$Sub_metering_2)
febdata$Sub_metering_3<-as.numeric(febdata$Sub_metering_3)
febdata$Global_reactive_power<-as.numeric(febdata$Global_reactive_power)
febdata$Voltage<-as.numeric(febdata$Voltage)
timeperiod<-strptime(paste(febdata$Date, febdata$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
png("plot4.png", width=480, height=480)
par(mfrow = c(2, 2))
plot(timeperiod, febdata$Global_active_power, type="l", xlab="", ylab="Global Active Power", cex=0.2)
plot(timeperiod, febdata$Voltage, type="l", xlab="datetime", ylab="Voltage")
plot(timeperiod, febdata$Sub_metering_1, type="l", ylab="Energy Submetering", xlab="")
lines(timeperiod, febdata$Sub_metering_2, type="l", col="red")
lines(timeperiod, febdata$Sub_metering_3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=, lwd=2.5, col=c("black", "red", "blue"), bty="o")
plot(timeperiod, febdata$Global_reactive_power, type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(swirl)
rm(list=ls())
swirl()
head(airquality)
library(swirl)
swirl()
xyplot(Ozone~Wind, data=airquality)
xyplot(Ozone~Wind, data=airquality, col="red", pch=8, main="Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), data=airquality, layout=c(5,1))
xyplot(Ozone~Wind | Month, data=airquality, layout=c(5,1))
p<- xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f,layout=c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"), local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local=TRUE)
xyplot(price~carat | color*cut,data=diamonds,strip=FALSE,pch=20,xlab="myxlab",ylab="myylab")
xyplot(price~carat|color*cut,data=diamonds,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat|color*cut,data=diamonds,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
library(swirl)
swirl()
sample(colors(), 10)
pal<-colorRamp(c("red","blue"))
pal(0)
pal(1)
library(swirl)
swirl
swirl()
pal(seq(0,1,len=6))
colorRampPalette(c("red","blue"))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2<-colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3<-colorRampPalette(c("red","blue","green"), alpha=0.5)
p3<-colorRampPalette(c("red","blue","green"), alpha=.5)
p3 <- colorRampPalette(c("blue","green"),alpha=.5)
p3(5)
plot(x,y,pch=19,rgb(0,.5,.5))
plot(x,y,pch=19,rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
cols<-brewer.pal(3,"BuGn")
showMe(cols)
pal<-colorRampPalette((cols)
)
pal<-colorRampPalette(cols)
showMe(pal(20))
image(volcano , col=pal(20))
image(volcano , col=p1(20))
str(mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,col=drv)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom=c("point","smooth"))
qplot(y=hwy, data = mpg, color = drv)
myhigh
qplot(drv,hwy,data=mpg,geom="boxplot")
qplot(drv,hwy,data=mpg,geom="boxplot", color=manufacturer)
qplot(hwy, data=mpg, fill=drv)
qplot(displ, hwy, data=mpg, facets=.~ drv)
qplot(hwy, data=mpg, facets=drv ~ . ., binwidth=2)
qplot(hwy, data=mpg, facets=drv ~ . , binwidth=2)
library(swirl)
swirl()
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), facets=.~drv)
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), facets=drv~.)
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), facets=.~drv)
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), facets=drv~.)
g <- ggplot(mpg, aes(displ,hwy) )
summary(g)
g+geom_point()
g+geom_point()+geom_smoth()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth("lm")
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
library(swirl)
swirl()
g+geom_point(color="pink",size=4,aplha=1/2)
g+geom_point(color="pink",size=4,alpha=1/2)
g+geom_point(size=4,alpha=1/2,aes=drv)
g+geom_point(size=4,alpha=1/2,aes(drv))
g+geom_point(size=4,alpha=1/2,aes(color=drv))
g+geom_point(size=4,alpha=1/2,aes(color=drv),labs(title="Swirl Rules!"))
g+geom_point(size=4,alpha=1/2,aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement",y="Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv),size=2,alpha=1/2)+geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g+geom_point(aes(color=drv))+theme_bw(base_family="Times")
plot(myx, myy, type="l", and ylim=c(-3,3))
plot(myx, myy, type="l", ylim=c(-3,3))
g<-ggplot(testdat,aes(x=myx,y=myy))
g<-ggplot(testdat,aes(x=myx,y=myy))+geom_line()
g<-ggplot(testdat,aes(x=myx,y=myy))
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian()ylim=c(-3,3)
g+geom_line()+coord_cartesian(ylim=c(-3,3))
g<-ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g
g+geom_point()
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")+labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
str(diamonds)
qplot(price,data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds, binwidth =18497/30)
brk
counts
qplot(price, data=diamonds, binwidth =18497/30,fill=cut)
qplot(price, data=diamonds, set="density")
qplot(price,data=diamonds,geom="density")
qplot(price,data=diamonds,geom="density",color=cut)
qplot(carat,price,data= dataset)
qplot(carat,price,data=dataset)
qplot(carat,price,data=diamond)
qplot(carat,price,data=diamond)
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds,shape=cut)
qplot(carat,price,data=diamonds,color=cut)
qplot(carat,price,data=diamonds,color=cut,geom_smooth="lm")
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat,price,data=diamonds,color=cut,facets=.~cut) + geom_smooth(method="lm")
g<-ggplot(diamonds,aes(depth,price))
summary(g)
g+geom_point(alpha=1/3)
cutpoints<-quantile(data=diamonds$carat,seq(0, 1,length=4),na.rm=TRUE)
cutpoints <- quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
cutpoints
diamonds$car2<-cut(diamonds$carat,cutpoints)
g<-ggplot(diamonds,aes(depth,price))
g+geom_point(alpha=1/3)+facet_grid(cut ~ car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
library(swirl)
swirl()
dist(dataFrame)
hclust(distxy)
hc<-hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5,col="blue")
abline(h=.4,col="red")
5
abline(h=.05,col="red")
12
abline(h=.05,col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
mdist(x,y,cx,cy)
apply(distTmp,mean(distTmp),which.min(distTmp))
apply(distTmp,mean,which.min())
apply(distTmp,mean,which.min(distTmp[0,]))
apply(distTmp,mean,which.min(distTmp[,]))
help()
apply(distTmp,mean)
apply(distTmp,mean)
apply(distTmp,colMeans(disTmp),which.min)
apply(distTmp,colMeans(distTmp),which.min)
apply(distTmp,colMeans(distTmp),which.min())
apply(distTmp,colMeans(distTmp),which.min(distTmp))
apply(distTmp,colMeans(distTmp),which.min)
apply(distTmp,mean)
apply(distTmp,colMeans)
apply(distTmp,sum)
apply(distTmp)
distTmp
apply(distTmp,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(newCx,newCy,col=cols1, pch=8,cex =2,lwd=2)
mdist(x, y, newCx, newCy)
apply(distTmp2,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(y,newClust2,mean)
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
points(finalCx,finalCy,col=cols1, pch=8,cex =2,lwd=2)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame,centers=2)
kmeans(dataFrame,centers=3)
kmObj$iter
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points(kmObj$centers,col=c("black","red","green"),pch=3, cex=3, lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19, cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19, cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19, cex=2)
library(swirl)
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local =TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
d
svd2$d
svd2
svd2$v[,1:2]
svd2$d
dim(faceData)
a1<-(svd1$u[,1] * svd1$d[1]) %*% svd1$v
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
svd1$d[1:2]
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
subset(ssd,subject=1)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
dist(sub1[,1:3])
mdist <- dist(sub1[,1:3])
hclust(mdist )
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col=unclass(sub1$activity))
mdist<-dist(sub1[,10:12])
hclustering<-hclust(mdist)
myplclust(hclustering,lab.col=unclass(sub1$activity))
svd1<-svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon<-which.max(svd1$v[,2])
mdist<-dist(sub1[,10:12])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering<-hclust( mdist)
myplclust(hclustering,lab.col=unclass(sub1$activity))
names(sub1[maxCon])
kClust<-kmeans(sub1,centers=6)
kClust<-kmeans(sub1[,1:4],centers=6)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster,sub1$activity)
kClust<-kmeans(sub1[,-c(562, 563)],centers=6,nstart=100)
table(kClust$cluster,sub1$activity)
dim(kClust$centers)
which(kClust$size==29)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12],pch=19,ylab="Laying Cluster")
names(sub1[,1:3])
which(kClust$size==49)
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12]],pch=19,ylab="Walkdown Cluster")
plot(kClust$centers[walkdown,1:12],pch=19,ylab="Walkdown Cluster")
savehistory("D:/E backup/Coursera/Data Science JHU Specialization/DSCourseraJHU/plotting_commands.Rhistory")
